name: CI
on:
  push:
    branches:
    - v2.0
jobs:
  docker:
    runs-on: ubuntu-18.04
    steps:
    - name: chekout
      uses: actions/checkout@v2
    - name: test
      run: |
        set -x
        docker build -t test .
        docker run -d --name container_test test
        while true
          do \
            sleep 10
            docker exec container_test ps | grep 'php -f index.php' && break
          done
        while true
          do \
            sleep 10
            docker logs container_test 2>& 1 | grep 'PHP .* Development Server .* started' && break
          done
  swarm:
    runs-on: ubuntu-18.04
    steps:
    - name: chekout
      uses: actions/checkout@v2
    - name: test
      run: |
        set -x
        docker build -t ccervigonavila/phpinfo-2:testing .
        docker swarm init
        compose=etc/swarm/manifests/phpinfo-2.yaml
        sed -i /image:/s/2.0/testing/ ${compose}
        sed -i /node.role/s/worker/manager/ ${compose}
        # Despliegue en Openshift
        # oc apply -f ${compose}
        # Despliegue Kubernetes
        # kubectl apply -f ${compose}
        # Despliegue en swarm
        docker stack deploy -c ${compose} phpinfo-2
        while true
          do \
            sleep 10
            docker service ls | grep "phpinfo-2.*\([0-9]\)/\1" && break
          done
        while true
          do \
            sleep 10
            docker service logs phpinfo-2_phpinfo-2 2>& 1 | grep 'PHP .* Development Server .* started' && break
          done
  kubernetes:
    runs-on: ubuntu-18.04
    steps:
    - name: chekout
      uses: actions/checkout@v2
    - name: test
      run: |
        set -x
        docker build -t ccervigonavila/phpinfo-2:testing .
        sudo apt-get update -y
        # sudo apt-get install -y docker.io
        # sudo systemctl enable --now docker
        curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
        echo deb http://apt.kubernetes.io/ kubernetes-xenial main | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
        sudo apt-get update
        sudo apt-get install -y --allow-downgrades kubelet=1.18.14-00 kubeadm=1.18.14-00 kubectl=1.18.14-00
        sudo systemctl enable --now kubelet
        ip_leader=$( ip r | grep default | awk '{ print $9 }' )
        echo ${ip_leader} kube-apiserver | sudo tee -a /etc/hosts
        sudo swapoff --all
        sudo kubeadm init --upload-certs --control-plane-endpoint kube-apiserver --pod-network-cidr 192.168.0.0/16 --ignore-preflight-errors all
        # copiamos las credenciales a nuestro directorio
        mkdir -p ${HOME}/.kube
        sudo cp /etc/kubernetes/admin.conf ${HOME}/.kube/config
        sudo chown -R $( id -u ):$( id -g ) ${HOME}/.kube
        kubectl apply -f https://docs.projectcalico.org/v3.17/manifests/calico.yaml
        while true
          do \
            kubectl get node | grep Ready | grep -v NotReady && break
            sleep 10
          done
        # limpiamos configuraciÃ³n
        sudo sed -i /kube-apiserver/d /etc/hosts
        sudo sed -i /127.0.0.1.*localhost/s/$/' 'kube-apiserver/ /etc/hosts
        # Habilitar el master
        master=$( kubectl get node | grep master | awk '{ print $1 }' )
        kubectl taint node ${master} node-role.kubernetes.io/master:NoSchedule-
        compose=etc/kubernetes/manifests/phpinfo-2.yaml
        sed -i /image:/s/2.0/testing/ ${compose}
        sed -i /imagePullPolicy/s/Always/Never/ ${compose}
        # Despliegue en Openshift
        # oc apply -f ${compose}
        # Despliegue Kubernetes
        kubectl apply -f ${compose}
        # Despliegue en swarm
        # docker stack deploy -c ${compose} phpinfo-2
        while true
          do \
            sleep 10
            kubectl describe deploy
            kubectl describe rs
            kubectl describe po
            kubectl get deploy | grep "phpinfo-2.*\([0-9]\)/\1" && break
          done
        while true
          do \
            sleep 10
            kubectl logs deploy/phpinfo-2 2>& 1 | grep 'PHP .* Development Server .* started' && break
          done
